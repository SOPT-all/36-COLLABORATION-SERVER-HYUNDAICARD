name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Setup test application.yml file
      run: |
        mkdir -p ./src/main/resources
        echo "${{ secrets.APPLICATION_YML_TEST }}" | base64 -d > ./src/main/resources/application-test.yml
        
    - name: Setup Production application.yml file
      run: |
        mkdir -p ./src/main/resources
        echo "${{ secrets.APPLICATION_YML_PROD }}" | base64 -d > ./src/main/resources/application-prod.yml

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # Spring Boot 어플리케이션 Build
    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # Docker 이미지 Build
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test .

    # DockerHub Login (push 하기 위해)
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Docker hub 로 push
    - name: Docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test

  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행
  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: docker pull
      run : sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test

    - name: Create .env file
      run: echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env

    - name: Docker Compose Up
      run: |
        sudo docker-compose pull
        sudo docker-compose down
        sudo docker-compose up -d
        sudo docker ps

